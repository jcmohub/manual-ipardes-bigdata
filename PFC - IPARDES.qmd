---
title: "Manual de Ferramentas Computacionais no IPARDES"
author: "Jos√© Carlos Martinez"
lang: pt
format:
  html:
    toc: true
    number-sections: true
  pdf:
    toc: true
    number-sections: true
  docx:
    toc: true
    number-sections: true
execute: 
  echo: true
  eval: false
  warning: false
  message: false
editor: visual
---

# Linguagens de Programa√ß√£o: R

![](images/Rlogo.png){width="289"}

O **R** √© uma linguagem de programa√ß√£o e ambiente para computa√ß√£o estat√≠stica e gr√°fica, e parte do projeto GNU1: Portanto √© uma linguagem de programa√ß√£o livre e c√≥digo aberto. A instala√ß√£o do R pode ser feita pelo [*"Comprehensive R Archive Network"*](https://cran.r-project.org/) (CRAN), Na p√°gina voc√™ encontrar√° as distribui√ß√µes R para diferentes sistemas operacionais: Linux (Debian, Fedora,Redhat, Ubuntu), mac OS e Windows. Ainda na p√°gina do CRAN voc√™ pode acessar a √∫til lista de pacotes agrupados por tarefas/√°reas √© o chamado CRAN Task views.

#### **RStudio**

O RStudio √© uma IDE (Ambiente de Desenvolvimento Integrado) e um dos mais populares da sua categoria, devido ao fato de ser r√°pido e f√°cil de aprender. Al√©m disso, a IDE j√° vem totalmente habilitada para o uso do R em todos os aspectos.

O download pode ser feito pelo site: <https://posit.co/download/rstudio-desktop/>

#### Configura√ß√£o de Proxy para Instala√ß√£o de Pacotes

Em ambientes institucionais como o do IPARDES, o R pode n√£o conseguir acessar a internet diretamente. Isso ocorre porque a rede est√° protegida por um servidor proxy, que filtra e controla o tr√°fego. Sem configurar corretamente esse proxy, voc√™ pode ter problemas ao instalar pacotes do CRAN ou acessar bibliotecas externas.

#### Como configurar o Proxy no R

Siga os passos abaixo para configurar o proxy institucional do IPARDES:

1.  Execute o seguinte comando no R para abrir o arquivo `.Rprofile`, onde ser√£o salvas as configura√ß√µes de rede:

    ```{r, .results = "hide"}

    file.edit(file.path("~", ".Rprofile"))
    ```

2.  No arquivo que ser√° aberto, insira o seguente c√≥digo:

    ```{r, message=FALSE, warning=FALSE, results='hide'}
    Sys.getenv(c("http_proxy", "https_proxy", "http_proxy_user"))
    Sys.setenv(http_proxy="proxy.ipardes.parana:8080")
    Sys.setenv(https_proxy="proxy.ipardes.parana:8080")
    Sys.setenv(http_proxy_user="ask")
    Sys.getenv(c("http_proxy", "https_proxy", "http_proxy_user"))
    ```

3.  Salve o arquivo e reinicie o R ou o RStudio.

#### Gest√£o de Diret√≥rios e Organiza√ß√£o de Arquivos no R

Ao usar o R, uma das primeiras coisas importantes a se compreender √© como organizar corretamente os arquivos e pastas do seu projeto. Essa pr√°tica permite que o R encontre com facilidade os arquivos necess√°rios (como bases de dados), mantendo o trabalho limpo, estruturado e funcional. Al√©m disso, assegura que os scripts possam ser executados de forma reprodut√≠vel, o que √© especialmente relevante em contextos institucionais como o IPARDES, onde a padroniza√ß√£o e a confiabilidade das an√°lises s√£o fundamentais.

#### Diret√≥rio de Trabalho (Working Directory) üìÅ

O diret√≥rio de trabalho √© a pasta onde o R ir√° buscar arquivos para leitura e onde ir√° salvar arquivos criados.

#### Verificando o diret√≥rio atual:

Antes de qualquer coisa, √© √∫til saber em qual pasta o R est√° trabalhando no momento. Isso √© importante porque, se voc√™ tentar carregar um arquivo e ele n√£o estiver nessa pasta, o R n√£o vai encontr√°-lo.

Para verificar o diret√≥rio de trabalho atual, use o seguinte comando:

```{r, eval=TRUE}
getwd()
```

Esse comando significa ‚Äúget working directory‚Äù ‚Äì ou seja, *obter o diret√≥rio de trabalho*. Ele vai mostrar o caminho da pasta atual onde o R est√° procurando e salvando arquivos, Para listar o conte√∫do de um diret√≥rio, utilize a fun√ßao `list` , `files()` ou `dir()`

#### Teste b√°sico

```{r, eval=TRUE}
1 + 1
```

#### Pacotes

Um pacote no R √© um conjunto de fun√ß√µes que visam resolver um problema em espec√≠fico. O R j√° vem com alguns pacotes instalados. Geralmente chamamos esses pacotes de base R. Mas a for√ßa do R est√° na gigantesca variedade de pacotes desenvolvidos pela comunidade, em especial, pelos criadores do `tidyverse`

#### Instalando e carregando pacotes

Para instalar um pacote da CRAN, usamos a fun√ß√£o `install.packages()`.

```{r}
# Instalando um pacote
install.packages("tidyverse")
# Instalando v√°rios pacotes de uma vez
install.packages(c("tidyverse", "rmarkdown", "devtools"))
```

Para usar as fun√ß√µes de um pacote, precisamos carreg√°-lo. Fazemos isso usando a fun√ß√£o `library()`.

```{r}
library(tidyverse)
```

#### Leitura de Arquivos .csv e .xlsx no R üì•

A leitura correta de arquivos √© um dos primeiros e mais importantes passos para qualquer an√°lise de dados. Nesta se√ß√£o, abordamos como importar arquivos .csv (texto separado por v√≠rgulas) e .xlsx (planilhas do Excel) usando as linguagens R e Python, com foco especial nos pacotes mais utilizados e na preven√ß√£o de erros comuns.

Leitura de .csv e .xlsx

üì¶ Pacotes utilizados: `readr` ‚Äì para arquivos .csv

`readxl` ‚Äì para arquivos .xlsx

`openxlsx` (alternativo)

Instale (se necess√°rio) e carregue os pacotes conforme o exemplo:

```{r}
# Instalar os pacotes (somente se ainda n√£o estiverem instalados)
install.packages("readr")
install.packages("readxl")

# Carregar os pacotes
library(readr)
library(readxl)

# Leitura de um arquivo .CSV
dados_csv <- read_csv("dados/meu_arquivo.csv")

# Caso o separador seja ponto e v√≠rgula
dados_csv <- read_delim("dados/arquivo.csv", delim = ";")

# Visualizar as primeiras linhas
head(dados_csv)
# Para vermos o resumo dos dados, podemos utilizar a fun√ß√£o glimpse()
glimpse(dados_csv)

# Leitura de um arquivo .xlsx
dados_excel <- read_excel("dados/meu_arquivo.xlsx")

# Leitura de uma planilha espec√≠fica
dados_excel2 <- read_excel("dados/meu_arquivo.xlsx", sheet = "Planilha2")

# Visualizar as primeiras linhas
head(dados_excel)
# Para vermos o resumo dos dados, podemos utilizar a fun√ß√£o glimpse()
glimpse(dados_excel)
```

# Linguagens de Programa√ß√£o: Python

![](images/python_logo_icon_168886.png){width="289"}

O **Python** √© uma linguagem de programa√ß√£o moderna, vers√°til e de c√≥digo aberto, amplamente utilizada em √°reas como an√°lise de dados, automa√ß√£o, intelig√™ncia artificial e ci√™ncia de dados. Sua sintaxe simples facilita o aprendizado e sua enorme comunidade oferece suporte constante e milhares de pacotes prontos para uso.

------------------------------------------------------------------------

#### Preparando o Ambiente de Trabalho

Para Instalar a ferramenta Acesse o site oficial do Python:

üîó <https://www.python.org/downloads/>

Clique em Download Python 3.x.x (a vers√£o mais atual) e siga os passos do instalador. Durante a instala√ß√£o, marque a op√ß√£o "Add Python to PATH" ‚Äî isso facilita o uso no terminal e em editores como o VS Code. Ap√≥s instalar o Python, voc√™ j√° poder√° us√°-lo diretamente pelo terminal (prompt de comando), mas isso pode ser desconfort√°vel para quem est√° iniciando. Por isso, recomendamos o uso de um ambiente de desenvolvimento integrado (IDE), como o Visual Studio Code (VS Code).

A IDE facilita muito o processo de escrita, organiza√ß√£o e execu√ß√£o de c√≥digos, oferecendo recursos como:

-   Destaque de sintaxe

-   Sugest√µes autom√°ticas

-   Execu√ß√£o de trechos de c√≥digo

-   Terminal integrado

-   Organiza√ß√£o de pastas e arquivos do projeto

Ou seja, enquanto o Python √© a linguagem de programa√ß√£o, o VS Code √© o ambiente onde voc√™ vai trabalhar com ela de forma pr√°tica e eficiente.

#### **Visual Studio Code (VS Code)**

O VS Code √© uma IDE leve, gratuita e muito poderosa, desenvolvida pela Microsoft.

üîó Baixe em: <https://code.visualstudio.com/>

Ap√≥s instalar, abra o VS Code e v√° na aba de extens√µes (√≠cone de quadrado no menu lateral esquerdo).

> Pesquise e instale a extens√£o chamada **Python** (desenvolvida pela Microsoft).

------------------------------------------------------------------------

#### Usando Python no VS Code

1.  Crie uma nova pasta para seu projeto (ex: `ipardes-python`).
2.  Dentro da pasta, crie um novo arquivo com o nome `teste.py`
3.  Escreva o seguinte c√≥digo:

**Teste b√°sico**

```{python, eval=TRUE}
print("Ol√°, IPARDES!")
2 + 2
```

#### Pacotes No Python üì¶

No Python, os pacotes (ou m√≥dulos) tamb√©m s√£o conjuntos de fun√ß√µes e ferramentas que facilitam tarefas espec√≠ficas, como an√°lise de dados, visualiza√ß√£o, estat√≠stica ou automa√ß√£o. Assim como no R, o poder do Python est√° na sua enorme comunidade que desenvolve pacotes poderosos como `pandas` , `numpy` , `matplotlib` , entre muitos outros.

**Instalando e importando pacotes**

Voc√™ pode instalar pacotes diretamente pelo terminal (Prompt de Comando no Windows ou Terminal no Linux/macOS). A instala√ß√£o de pacotes no Python √© feita, na maioria das vezes, com o `pip` o gerenciador padr√£o de pacotes da linguagem.

```{python, echo=TRUE, eval=FALSE}
# Instalando um pacote individual
!pip install pandas

# Importando pacotes
import pandas as pd
```

#### Leitura de arquivos .csv e .xlsx üì•

No Python a Leitura de arquivos .csv e .xlsx e feito com os pacotes:

`pandas` ‚Äì pacote principal para an√°lise e leitura de dados em geral.

`openpyxl` ‚Äì necess√°rio para leitura de arquivos .xlsx com o pandas.

```{python}

# Importar os pacotes
import pandas as pd

# Leitura de arquivo CSV
df_csv = pd.read_csv("dados/meu_arquivo.csv")

# Visualizar as primeiras linhas
print(df_csv.head())

# Leitura de arquivo .xlsx Excel
df_xlsx = pd.read_excel("dados/meu_arquivo.xlsx", engine="openpyxl")

# Leitura de uma planilha espec√≠fica
df_xlsx2 = pd.read_excel("dados/meu_arquivo.xlsx", sheet_name="Planilha2", engine="openpyxl")

# Visualizar as primeiras linhas
print(df_xlsx.head())
```

# Bancos de Dados Relacionais

![](images/RDBMS.png)

Os **bancos de dados relacionais** s√£o sistemas projetados para armazenar e organizar grandes volumes de informa√ß√µes de forma estruturada, utilizando a linguagem SQL (*Structured Query Language*). Eles s√£o compostos por tabelas interconectadas por rela√ß√µes, garantindo consist√™ncia e integridade dos dados.

#### Principais Sistemas de Banco de Dados Relacional

-   **MySQL** ‚Äì muito usado em aplica√ß√µes web, √© gratuito e de c√≥digo aberto.

-   **PostgreSQL** ‚Äì poderoso, gratuito e com foco em conformidade com os padr√µes SQL.

-   **SQL Server** ‚Äì solu√ß√£o da Microsoft, com foco em ambientes corporativos.

-   **Oracle Database** ‚Äì robusto, seguro e altamente escal√°vel, usado em grandes institui√ß√µes.

-   **SQLite ‚Äì** Leve, Did√°tico e ideal para iniciantes

![](images/sqlite.svgTOP.png){width="298"}

#### **SQLite**

O SQLite √© um banco de dados relacional leve, port√°til e de c√≥digo aberto. Toda a base de dados fica armazenada em um √∫nico arquivo .db, o que o torna ideal para testes, aprendizagem e uso em computadores pessoais ou ambientes institucionais como o IPARDES, que trabalham com grandes volumes de dados, mas n√£o necessariamente precisam de solu√ß√µes complexas de banco em rede.

> üí° **Por que aprender com SQLite?**\
> - N√£o requer servidor instalado.\
> - Interface gr√°fica amig√°vel (DB Browser).\
> - Ideal para praticar comandos SQL e automatizar an√°lises com R/Python.

------------------------------------------------------------------------

#### **Preparando o Ambiente de Trabalho**

Acesse o site oficial e clique no bot√£o "Download":<https://www.sqlite.org/>

Role a p√°gina at√© a se√ß√£o **‚ÄúPrecompiled Binaries for Windows‚Äù**

Verifique a arquitetura do seu sistema (32 ou 64 bits): Para isso, v√° at√© **Configura√ß√µes \> Sistema \> Sobre** no seu Windows e procure por "Tipo de sistema".

Baixe o pacote adequado:

Para **64 bits**, baixe:\
`sqlite-tools-win-x64-XXXXXXX.zip`

Para **32 bits**, baixe:\
`sqlite-tools-win-x86-XXXXXXX.zip`

O n√∫mero `XXXXXXX` representa a vers√£o atual (ex: 3490100). Pegue sempre a vers√£o mais recente no topo da lista.

**Extraia o conte√∫do do `.zip`** para uma pasta acess√≠vel, como por exemplo: C:\Programas\SQLite\
Ap√≥s extrair os arquivos do ZIP baixado, voc√™ pode: **Clicar duas vezes em `sqlite3.exe`** dentro da pasta para abrir o terminal do SQLite.

Ou, se preferir: **Adicionar o caminho da pasta ao ‚ÄúPath‚Äù do sistema**, para poder acessar o SQLite digitando `sqlite3` diretamente no terminal de qualquer lugar.\
(Opcional, mas recomendado para quem for automatizar comandos no terminal.)

Com ele, voc√™ poder√°:

-   Criar e editar arquivos `.db`\
-   Importar dados `.csv` ou `.xlsx`\
-   Executar comandos SQL\
-   Visualizar e exportar tabelas

------------------------------------------------------------------------

#### Leitura de Arquivos `.csv` e `.xlsx` no SQLite (via Terminal)

Antes de importar qualquer arquivo `.csv` no SQLite pelo terminal, √© necess√°rio:

1.  Criar ou abrir um banco `.db`;

2.  Definir o modo e o separador dos dados;

3.  Importar o arquivo `.csv` para uma tabela.

```{bash,eval"false"}
sqlite caminho/para/seu_banco.db
.mode csv
.separator ","
.import "caminho/para/arquivo.csv" nome_da_tabela

# Observa√ß√£o, O separador padr√£o √© v√≠rgula "," mas pode ser alterado 
# para ponto e v√≠rgula ";" com .separator ";" conforme a base de dados.
```
